package Bencher::Scenario::DataSahParams::Validate;

# DATE
# VERSION

use 5.010001;
use strict;
use warnings;

our $scenario = {
    summary => 'Measure validation speed',
    participants => [
        {
            name => 'dsp',
            module => 'Data::Sah::Params',
            code_template => q(state $check = Data::Sah::Params::compile("int*", ["array*",of=>"int*"]); $check->(@{<args>})),
        },
        {
            name => 'tp',
            module => 'Type::Params',
            code_template => q(use Type::Params qw(compile); use Types::Standard qw(Int ArrayRef); state $check = compile(Int, ArrayRef[Int]); $check->(@{<args>})),
        },
    ],
    datasets => [
        {
            name => '1,[]',
            args => { args => [1,[]] },
        },
        {
            name => '1,[1..10]',
            args => { args => [1,[1..10]] },
        },
        {
            name => '1,[1..100]',
            args => { args => [1,[1..100]] },
        },
    ],
};

1;
# ABSTRACT:

=head1 BENCHMARK NOTES

In this benchmark case, code generated by Data::Sah performs significantly more
slowly because it is not particularly optimized. Future releases of Data::Sah
will add some optimizations.

To see the source code generated by Data::Sah, you can try on the command-line
(the CLI utility is part of L<App::SahUtils>):

 % validate-with-sah '"int*"' -r str -c
