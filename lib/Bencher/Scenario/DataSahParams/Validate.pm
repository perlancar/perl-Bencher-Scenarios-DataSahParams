package Bencher::Scenario::DataSahParams::Validate;

# DATE
# VERSION

use 5.010001;
use strict;
use warnings;

our $scenario = {
    summary => 'Measure validation speed',
    participants => [
        {
            name => 'dsp_int',
            module => 'Data::Sah::Params',
            code_template => q(state $check = Data::Sah::Params::compile("int*"); $check->(@{<args>})),
            tags => ['int'],
        },
        {
            name => 'tp_int',
            module => 'Type::Params',
            code_template => q(use Type::Params qw(compile); use Types::Standard qw(Int); state $check = compile(Int); $check->(@{<args>})),
            tags => ['int'],
        },

        {
            name => 'dsp_int_int[]',
            module => 'Data::Sah::Params',
            code_template => q(state $check = Data::Sah::Params::compile("int*", ["array*",of=>"int*"]); $check->(@{<args>})),
            tags => ['int_int[]'],
        },
        {
            name => 'tp_int_int[]',
            module => 'Type::Params',
            code_template => q(use Type::Params qw(compile); use Types::Standard qw(Int ArrayRef); state $check = compile(Int, ArrayRef[Int]); $check->(@{<args>})),
            tags => ['int_int[]'],
        },
    ],
    datasets => [
        {
            name => '1',
            args => { args => [1] },
            include_participant_tags => ['int'],
        },
        {
            name => '1,[]',
            args => { args => [1,[]] },
            include_participant_tags => ['int_int[]'],
        },
        {
            name => '1,[1..10]',
            args => { args => [1,[1..10]] },
            include_participant_tags => ['int_int[]'],
        },
        {
            name => '1,[1..100]',
            args => { args => [1,[1..100]] },
            include_participant_tags => ['int_int[]'],
        },
    ],
};

1;
# ABSTRACT:

=head1 BENCHMARK NOTES

In this benchmark case, code generated by Data::Sah performs significantly more
slowly because it is not particularly optimized. Future releases of Data::Sah
will add some optimizations.

To see the source code generated by Data::Sah::Params, pass C<< want_source => 1
>> option to C<compile()>, e.g.:

 compile({want_source=>1}, "int*", ...)

Or you can try on the command-line (the CLI utility is part of
L<App::SahUtils>):

 % validate-with-sah '"int*"' -c

To see the source code generated by Type::Params, pass C<< want_source => 1 >>
option to C<compile()> like in Data::Sah::Params, e.g.:

 compile({want_source=>1}, Int, ...)
